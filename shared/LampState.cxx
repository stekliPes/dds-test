// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LampState.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "LampState.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define LampState_max_cdr_typesize 22ULL;
#define LampState_max_key_cdr_typesize 21ULL;

LampState::LampState()
{
    // string m_LampID
    m_LampID ="";
    // boolean m_on
    m_on = false;

}

LampState::~LampState()
{


}

LampState::LampState(
        const LampState& x)
{
    m_LampID = x.m_LampID;
    m_on = x.m_on;
}

LampState::LampState(
        LampState&& x) noexcept 
{
    m_LampID = std::move(x.m_LampID);
    m_on = x.m_on;
}

LampState& LampState::operator =(
        const LampState& x)
{

    m_LampID = x.m_LampID;
    m_on = x.m_on;

    return *this;
}

LampState& LampState::operator =(
        LampState&& x) noexcept
{

    m_LampID = std::move(x.m_LampID);
    m_on = x.m_on;

    return *this;
}

bool LampState::operator ==(
        const LampState& x) const
{

    return (m_LampID == x.m_LampID && m_on == x.m_on);
}

bool LampState::operator !=(
        const LampState& x) const
{
    return !(*this == x);
}

size_t LampState::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return LampState_max_cdr_typesize;
}

size_t LampState::getCdrSerializedSize(
        const LampState& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.LampID().size() + 1;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void LampState::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_LampID.c_str();
    scdr << m_on;

}

void LampState::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        std::string aux;
        dcdr >> aux;
        m_LampID = aux.c_str();
    }
    dcdr >> m_on;
}

/*!
 * @brief This function copies the value in member LampID
 * @param _LampID New value to be copied in member LampID
 */
void LampState::LampID(
        const eprosima::fastrtps::fixed_string<16>& _LampID)
{
    m_LampID = _LampID;
}

/*!
 * @brief This function moves the value in member LampID
 * @param _LampID New value to be moved in member LampID
 */
void LampState::LampID(
        eprosima::fastrtps::fixed_string<16>&& _LampID)
{
    m_LampID = std::move(_LampID);
}

/*!
 * @brief This function returns a constant reference to member LampID
 * @return Constant reference to member LampID
 */
const eprosima::fastrtps::fixed_string<16>& LampState::LampID() const
{
    return m_LampID;
}

/*!
 * @brief This function returns a reference to member LampID
 * @return Reference to member LampID
 */
eprosima::fastrtps::fixed_string<16>& LampState::LampID()
{
    return m_LampID;
}
/*!
 * @brief This function sets a value in member on
 * @param _on New value for member on
 */
void LampState::on(
        bool _on)
{
    m_on = _on;
}

/*!
 * @brief This function returns the value of member on
 * @return Value of member on
 */
bool LampState::on() const
{
    return m_on;
}

/*!
 * @brief This function returns a reference to member on
 * @return Reference to member on
 */
bool& LampState::on()
{
    return m_on;
}



size_t LampState::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return LampState_max_key_cdr_typesize;
}

bool LampState::isKeyDefined()
{
    return true;
}

void LampState::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
   scdr << m_LampID.c_str();
   
  
}

